cmake_minimum_required(VERSION 3.5)
project(gazebo_plugin_sim)

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  # we dont use add_compile_options with pedantic in message packages
  # because the Python C extensions dont comply with it
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
endif()
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
find_package(ament_cmake REQUIRED)
find_package(gazebo_dev REQUIRED)
find_package(gazebo_ros REQUIRED)
find_package(rclcpp REQUIRED)
find_package(gazebo REQUIRED)
find_package(std_msgs REQUIRED)




include_directories(include
  ${gazebo_ros_INCLUDE_DIRS}
  ${std_msgs_INCLUDE_DIRS}
)


# platform_plugin_test
add_library(platform_plugin_test SHARED
  src/platform_plugin_test.cpp
)
ament_target_dependencies(platform_plugin_test
  "gazebo_dev"
  "gazebo_ros"
  "rclcpp"
  "std_msgs"
)
ament_export_libraries(platform_plugin_test)



ament_export_include_directories(include)
ament_export_dependencies(rclcpp)
ament_export_dependencies(gazebo_dev)
ament_export_dependencies(gazebo_ros)


ament_package()

install(DIRECTORY include/
        DESTINATION include)

install(TARGETS
    platform_plugin_test
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin)


install(DIRECTORY
  worlds
  DESTINATION share/${PROJECT_NAME}/
)